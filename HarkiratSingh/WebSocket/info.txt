// See document for socket.io for creating web socket server

// Websocket server is used for communication between browser initially and after websocket connection webRTC connection is set up

// Web Sockets use TCP protocols .i.e when their is bad connection and the response is not recieved again request is send for tye response . This type of servives are used in servers of application like whatsapp messanger

// WebRTC used UDP protocol .i.e if a packet is lost no further request is send to get that packet such system or servers are used where live rendering occurs .i.e video calling or audio calling . In WebRTC when only two browsers interact then they directly talks to each other they doesnt involves passing of image or video passing through a server . But when there are multiple browsers which contact to each other then there is a server in between them for communication . Here sometimes packets may get delayed 


// VVImp
// Stun (Session Traversal Utilities for NAT (Network Address Translation)):-  STUN servers are used to discover the public IP address and port associated with a device from within a private network. This information is crucial for establishing direct communication between devices, especially in peer-to-peer applications.  STUN plays a vital role in enabling direct communication between devices across networks with NAT or firewall devices, thereby facilitating various real-time communication applications over the internet.

// Ice Candidates includes IP , Port and Protocol
// Gathering ICE Candidates:

            // The client gathers ICE candidates by querying STUN and TURN servers. It collects host candidates, server reflexive candidates, and relay candidates.
            // The ICE agent on the client generates candidate pairs consisting of a local candidate and a remote candidate.
            // These candidate pairs are then prioritized based on factors like the type of candidate and the likelihood of successful communication.

// Exchanging ICE Candidates:

            // Once the client has gathered its ICE candidates, it sends them to the remote peer through a signaling channel (e.g., WebSocket, HTTP).
            // The remote peer also gathers its ICE candidates and sends them back to the client.
            // Both peers exchange their ICE candidate lists and start the connectivity checks.

// Connectivity Checks:

            // The client and remote peer perform connectivity checks using the candidate pairs generated earlier.
            // They send STUN packets over each candidate pair to determine if direct communication is possible.
            // If successful, they establish a direct connection using the candidate pair with the highest priority.

// Fallback Mechanisms:
            // If direct communication fails due to NAT/firewall restrictions, the peers may fall back to relayed communication using TURN servers.
            // Relay candidates obtained from TURN servers are used as a last resort to ensure connectivity even in challenging network conditions.

            
// Peer Cononection object
// In short, a Peer Connection object in WebRTC:
// 1. Handles the establishment of direct communication channels between peers.
// 2. Manages signaling for exchanging network information and negotiating communication parameters.
// 3. Utilizes ICE to discover the best communication path and overcome NAT/firewall issues.
// 4. Exchanges SDP messages to negotiate session details like codecs and network addresses.
// 5. Facilitates the transmission and reception of audio, video, and data streams between peers.
// 6. Implements NAT traversal techniques like STUN and TURN for reliable connectivity.

// Local Discription
// The "local description" in the context of WebRTC refers to the configuration and parameters of the peer connection set by the local device (the device initiating the connection). It contains information such as network addresses, codecs, and other session-related details necessary for establishing communication with the remote peer.
// In summary, the local description is a set of parameters generated by the initiating device that describes how it wants the connection to be established and maintained. This information is exchanged with the remote peer during the signaling process to negotiate and establish the connection.

// Remote description 
// The "remote description" in WebRTC refers to the session description protocol (SDP) information received from the remote peer during the connection negotiation process. It contains details about the remote peer's capabilities and preferences for the communication session, including codecs, media formats, network addresses, and other parameters necessary for establishing the connection.
// In short, the remote description provides essential metadata required for configuring the local peer's media streams and network settings to establish a successful communication session with the remote peer.

//SDP
//SDP stands for Session Description Protocol. It's a text-based format used to describe multimedia sessions for establishing communication between endpoints over a network. SDP contains information about the session, including session name, session start and end times, media types (audio, video, data), codecs, network addresses, and other session-related parameters.

In short, SDP provides a standardized way to negotiate and describe the characteristics of multimedia sessions, allowing endpoints to agree on the details necessary for communication. It's commonly used in protocols like SIP (Session Initiation Protocol) and WebRTC (Web Real-Time Communication).